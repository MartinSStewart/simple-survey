module Evergreen.Migrate.V5 exposing (..)

{-| This migration file was automatically generated by the lamdera compiler.

It includes:

  - A migration for each of the 6 Lamdera core types that has changed
  - A function named `migrate_ModuleName_TypeName` for each changed/custom type

Expect to see:

  - `Unimplement–µd` values as placeholders wherever I was unable to figure out a clear migration path for you
  - `@NOTICE` comments for things you should know about, i.e. new custom type constructors that won't get any
    value mappings from the old type by default

You can edit this file however you wish! It won't be generated again.

See <https://dashboard.lamdera.app/docs/evergreen> for more info.

-}

import AssocList
import Evergreen.V2.EmailAddress
import Evergreen.V2.Id
import Evergreen.V2.Postmark
import Evergreen.V2.Survey
import Evergreen.V2.SurveyName
import Evergreen.V2.Types
import Evergreen.V5.EmailAddress
import Evergreen.V5.Id
import Evergreen.V5.Postmark
import Evergreen.V5.Survey
import Evergreen.V5.SurveyName
import Evergreen.V5.Types
import Lamdera.Migrations exposing (..)
import List.Nonempty


frontendModel : Evergreen.V2.Types.FrontendModel -> ModelMigration Evergreen.V5.Types.FrontendModel Evergreen.V5.Types.FrontendMsg
frontendModel old =
    ModelUnchanged


backendModel : Evergreen.V2.Types.BackendModel -> ModelMigration Evergreen.V5.Types.BackendModel Evergreen.V5.Types.BackendMsg
backendModel old =
    ModelUnchanged


frontendMsg : Evergreen.V2.Types.FrontendMsg -> MsgMigration Evergreen.V5.Types.FrontendMsg Evergreen.V5.Types.FrontendMsg
frontendMsg old =
    MsgMigrated ( migrate_Types_FrontendMsg old, Cmd.none )


toBackend : Evergreen.V2.Types.ToBackend -> MsgMigration Evergreen.V5.Types.ToBackend Evergreen.V5.Types.BackendMsg
toBackend old =
    MsgMigrated ( migrate_Types_ToBackend old, Cmd.none )


backendMsg : Evergreen.V2.Types.BackendMsg -> MsgMigration Evergreen.V5.Types.BackendMsg Evergreen.V5.Types.BackendMsg
backendMsg old =
    MsgMigrated ( migrate_Types_BackendMsg old, Cmd.none )


toFrontend : Evergreen.V2.Types.ToFrontend -> MsgMigration Evergreen.V5.Types.ToFrontend Evergreen.V5.Types.FrontendMsg
toFrontend old =
    MsgMigrated ( migrate_Types_ToFrontend old, Cmd.none )


migrate_AssocList_Dict : (a_old -> a_new) -> (b_old -> b_new) -> AssocList.Dict a_old b_old -> AssocList.Dict a_new b_new
migrate_AssocList_Dict migrate_a migrate_b old =
    old
        |> AssocList.toList
        |> List.map (Tuple.mapBoth migrate_a migrate_b)
        |> AssocList.fromList


migrate_EmailAddress_EmailAddress : Evergreen.V2.EmailAddress.EmailAddress -> Evergreen.V5.EmailAddress.EmailAddress
migrate_EmailAddress_EmailAddress old =
    case old of
        Evergreen.V2.EmailAddress.EmailAddress p0 ->
            Evergreen.V5.EmailAddress.EmailAddress p0


migrate_Id_Id : (a_old -> a_new) -> Evergreen.V2.Id.Id a_old -> Evergreen.V5.Id.Id a_new
migrate_Id_Id migrate_a old =
    case old of
        Evergreen.V2.Id.Id p0 ->
            Evergreen.V5.Id.Id p0


migrate_Id_SurveyId : Evergreen.V2.Id.SurveyId -> Evergreen.V5.Id.SurveyId
migrate_Id_SurveyId old =
    case old of
        Evergreen.V2.Id.SurveyId p0 ->
            Evergreen.V5.Id.SurveyId p0


migrate_Id_UserToken : Evergreen.V2.Id.UserToken -> Evergreen.V5.Id.UserToken
migrate_Id_UserToken old =
    case old of
        Evergreen.V2.Id.UserToken p0 ->
            Evergreen.V5.Id.UserToken p0


migrate_List_Nonempty_Nonempty : (a_old -> a_new) -> List.Nonempty.Nonempty a_old -> List.Nonempty.Nonempty a_new
migrate_List_Nonempty_Nonempty migrate_a old =
    old |> List.Nonempty.map migrate_a


migrate_Postmark_Error : Evergreen.V2.Postmark.Error -> Evergreen.V5.Postmark.Error
migrate_Postmark_Error old =
    case old of
        Evergreen.V2.Postmark.UnknownError p0 ->
            Evergreen.V5.Postmark.UnknownError p0

        Evergreen.V2.Postmark.PostmarkError p0 ->
            Evergreen.V5.Postmark.PostmarkError p0

        Evergreen.V2.Postmark.NetworkError ->
            Evergreen.V5.Postmark.NetworkError

        Evergreen.V2.Postmark.Timeout ->
            Evergreen.V5.Postmark.Timeout

        Evergreen.V2.Postmark.BadUrl p0 ->
            Evergreen.V5.Postmark.BadUrl p0


migrate_SurveyName_SurveyName : Evergreen.V2.SurveyName.SurveyName -> Evergreen.V5.SurveyName.SurveyName
migrate_SurveyName_SurveyName old =
    case old of
        Evergreen.V2.SurveyName.SurveyName p0 ->
            Evergreen.V5.SurveyName.SurveyName p0


migrate_Survey_EmailStatus : Evergreen.V2.Survey.EmailStatus -> Evergreen.V5.Survey.EmailStatus
migrate_Survey_EmailStatus old =
    case old of
        Evergreen.V2.Survey.SendingEmail ->
            Evergreen.V5.Survey.SendingEmail

        Evergreen.V2.Survey.EmailError p0 ->
            Evergreen.V5.Survey.EmailError (p0 |> migrate_Postmark_Error)

        Evergreen.V2.Survey.EmailSuccess ->
            Evergreen.V5.Survey.EmailSuccess


migrate_Survey_FrontendSurvey : Evergreen.V2.Survey.FrontendSurvey -> Evergreen.V5.Survey.FrontendSurvey
migrate_Survey_FrontendSurvey old =
    { title = old.title |> migrate_SurveyName_SurveyName
    , questions = old.questions |> migrate_List_Nonempty_Nonempty migrate_Survey_SurveyQuestion
    , emailedTo =
        old.emailedTo
            |> migrate_List_Nonempty_Nonempty
                (Tuple.mapBoth (migrate_Id_Id migrate_Id_UserToken)
                    (\p0 ->
                        { email = p0.email |> migrate_EmailAddress_EmailAddress
                        , emailStatus = p0.emailStatus |> migrate_Survey_EmailStatus
                        }
                    )
                )
    , owner = old.owner |> migrate_Id_Id migrate_Id_UserToken
    , creationTime = old.creationTime
    }


migrate_Survey_SurveyQuestion : Evergreen.V2.Survey.SurveyQuestion -> Evergreen.V5.Survey.SurveyQuestion
migrate_Survey_SurveyQuestion old =
    { question = old.question
    , answers = old.answers |> migrate_AssocList_Dict migrate_EmailAddress_EmailAddress identity
    }


migrate_Types_AnsweringSurvey2 : Evergreen.V2.Types.AnsweringSurvey2 -> Evergreen.V5.Types.AnsweringSurvey2
migrate_Types_AnsweringSurvey2 old =
    { surveyId = old.surveyId |> migrate_Id_Id migrate_Id_SurveyId
    , userToken = old.userToken |> migrate_Id_Id migrate_Id_UserToken
    , emailAddress = old.emailAddress |> migrate_EmailAddress_EmailAddress
    , title = old.title |> migrate_SurveyName_SurveyName
    , answers = old.answers
    , submitState = old.submitState |> migrate_Types_SubmitState identity
    , creationTime = old.creationTime
    }


migrate_Types_BackendMsg : Evergreen.V2.Types.BackendMsg -> Evergreen.V5.Types.BackendMsg
migrate_Types_BackendMsg old =
    case old of
        Evergreen.V2.Types.SurveyEmailSent p0 p1 p2 ->
            Evergreen.V5.Types.SurveyEmailSent (p0 |> migrate_Id_Id migrate_Id_SurveyId)
                (p1 |> migrate_EmailAddress_EmailAddress)
                (p2 |> Result.mapError migrate_Postmark_Error)

        Evergreen.V2.Types.GotTime p0 p1 p2 p3 ->
            Evergreen.V5.Types.GotTime p0 p1 p2 (p3 |> migrate_Types_ToBackend)

        Evergreen.V2.Types.HourElapsed p0 ->
            Evergreen.V5.Types.HourElapsed p0


migrate_Types_CreateSurveyMsg : Evergreen.V2.Types.CreateSurveyMsg -> Evergreen.V5.Types.CreateSurveyMsg
migrate_Types_CreateSurveyMsg old =
    case old of
        Evergreen.V2.Types.PressedCreateSurvey ->
            Evergreen.V5.Types.PressedCreateSurvey

        Evergreen.V2.Types.PressedAddQuestion ->
            Evergreen.V5.Types.PressedAddQuestion

        Evergreen.V2.Types.PressedRemoveQuestion p0 ->
            Evergreen.V5.Types.PressedRemoveQuestion p0

        Evergreen.V2.Types.PressedMoveUpQuestion p0 ->
            Evergreen.V5.Types.PressedMoveUpQuestion p0

        Evergreen.V2.Types.PressedMoveDownQuestion p0 ->
            Evergreen.V5.Types.PressedMoveDownQuestion p0

        Evergreen.V2.Types.TypedQuestion p0 p1 ->
            Evergreen.V5.Types.TypedQuestion p0 p1

        Evergreen.V2.Types.TypedEmailTo p0 ->
            Evergreen.V5.Types.TypedEmailTo p0

        Evergreen.V2.Types.TypedSurveyName p0 ->
            Evergreen.V5.Types.TypedSurveyName p0


migrate_Types_CreatingSurvey2 : Evergreen.V2.Types.CreatingSurvey2 -> Evergreen.V5.Types.CreatingSurvey2
migrate_Types_CreatingSurvey2 old =
    { surveyName = old.surveyName
    , questions = old.questions
    , emailTo = old.emailTo
    , submitState =
        old.submitState
            |> migrate_Types_SubmitState
                (\rec ->
                    { surveyName = rec.surveyName |> migrate_SurveyName_SurveyName
                    , questions = rec.questions
                    , emailTo = rec.emailTo |> migrate_List_Nonempty_Nonempty migrate_EmailAddress_EmailAddress
                    }
                )
    }


migrate_Types_FrontendMsg : Evergreen.V2.Types.FrontendMsg -> Evergreen.V5.Types.FrontendMsg
migrate_Types_FrontendMsg old =
    case old of
        Evergreen.V2.Types.UrlClicked p0 ->
            Evergreen.V5.Types.UrlClicked p0

        Evergreen.V2.Types.UrlChanged p0 ->
            Evergreen.V5.Types.UrlChanged p0

        Evergreen.V2.Types.PressedSubmitSurvey ->
            Evergreen.V5.Types.PressedSubmitSurvey

        Evergreen.V2.Types.CreateSurveyMsg p0 ->
            Evergreen.V5.Types.CreateSurveyMsg (p0 |> migrate_Types_CreateSurveyMsg)

        Evergreen.V2.Types.TypedAnswer p0 p1 ->
            Evergreen.V5.Types.TypedAnswer p0 p1


migrate_Types_HasSubmitted : Evergreen.V2.Types.HasSubmitted -> Evergreen.V5.Types.HasSubmitted
migrate_Types_HasSubmitted old =
    case old of
        Evergreen.V2.Types.HasPressedSubmit ->
            Evergreen.V5.Types.HasPressedSubmit

        Evergreen.V2.Types.HasNotPressedSubmit ->
            Evergreen.V5.Types.HasNotPressedSubmit


migrate_Types_LoadSurveyError : Evergreen.V2.Types.LoadSurveyError -> Evergreen.V5.Types.LoadSurveyError
migrate_Types_LoadSurveyError old =
    case old of
        Evergreen.V2.Types.InvalidSurveyLink ->
            Evergreen.V5.Types.InvalidSurveyLink

        Evergreen.V2.Types.SurveyAlreadySubmitted ->
            Evergreen.V5.Types.SurveyAlreadySubmitted


migrate_Types_SubmitState : (a_old -> a_new) -> Evergreen.V2.Types.SubmitState a_old -> Evergreen.V5.Types.SubmitState a_new
migrate_Types_SubmitState migrate_a old =
    case old of
        Evergreen.V2.Types.NotSubmitted p0 ->
            Evergreen.V5.Types.NotSubmitted (p0 |> migrate_Types_HasSubmitted)

        Evergreen.V2.Types.Submitting p0 ->
            Evergreen.V5.Types.Submitting (p0 |> migrate_a)


migrate_Types_ToBackend : Evergreen.V2.Types.ToBackend -> Evergreen.V5.Types.ToBackend
migrate_Types_ToBackend old =
    case old of
        Evergreen.V2.Types.SubmitSurveyRequest p0 p1 p2 ->
            Evergreen.V5.Types.SubmitSurveyRequest (p0 |> migrate_Id_Id migrate_Id_SurveyId)
                (p1 |> migrate_Id_Id migrate_Id_UserToken)
                p2

        Evergreen.V2.Types.CreateSurveyRequest p0 p1 p2 ->
            Evergreen.V5.Types.CreateSurveyRequest (p0 |> migrate_SurveyName_SurveyName)
                p1
                (p2 |> migrate_List_Nonempty_Nonempty migrate_EmailAddress_EmailAddress)

        Evergreen.V2.Types.LoadSurveyRequest p0 p1 ->
            Evergreen.V5.Types.LoadSurveyRequest (p0 |> migrate_Id_Id migrate_Id_SurveyId)
                (p1 |> migrate_Id_Id migrate_Id_UserToken)


migrate_Types_ToFrontend : Evergreen.V2.Types.ToFrontend -> Evergreen.V5.Types.ToFrontend
migrate_Types_ToFrontend old =
    case old of
        Evergreen.V2.Types.SubmitSurveyResponse ->
            Evergreen.V5.Types.SubmitSurveyResponse

        Evergreen.V2.Types.CreateSurveyResponse p0 p1 p2 p3 ->
            Evergreen.V5.Types.CreateSurveyResponse (p0 |> migrate_Id_Id migrate_Id_SurveyId)
                (p1 |> migrate_Id_Id migrate_Id_UserToken)
                (p2
                    |> migrate_List_Nonempty_Nonempty
                        (Tuple.mapBoth (migrate_Id_Id migrate_Id_UserToken)
                            (\p4 ->
                                { email = p4.email |> migrate_EmailAddress_EmailAddress
                                , emailStatus = p4.emailStatus |> migrate_Survey_EmailStatus
                                }
                            )
                        )
                )
                p3

        Evergreen.V2.Types.LoadSurveyResponse p0 ->
            Evergreen.V5.Types.LoadSurveyResponse
                (p0
                    |> Result.mapError migrate_Types_LoadSurveyError
                    >> Result.map
                        (\rec1 ->
                            { surveyId = rec1.surveyId |> migrate_Id_Id migrate_Id_SurveyId
                            , userToken = rec1.userToken |> migrate_Id_Id migrate_Id_UserToken
                            , emailAddress = rec1.emailAddress |> migrate_EmailAddress_EmailAddress
                            , surveyName = rec1.surveyName |> migrate_SurveyName_SurveyName
                            , questions = rec1.questions
                            , creationTime = rec1.creationTime
                            }
                        )
                )

        Evergreen.V2.Types.LoadSurveyAdminResponse p0 p1 ->
            Evergreen.V5.Types.LoadSurveyAdminResponse (p0 |> migrate_Id_Id migrate_Id_SurveyId)
                (p1 |> Result.map migrate_Survey_FrontendSurvey)
